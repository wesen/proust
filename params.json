{"name":"Proust","tagline":"Compiling implementation of mustache","body":"Proust - Mustache template compiler for PHP\r\n===========================================\r\n\r\nProust is a PHP compiler for [mustache](http://mustache.github.com/)\r\ntemplates. It started as a port of the Ruby compiler for mustache\r\ntemplates, but was further extended for mustache v1.1.2 spec\r\ncompliance and PHP-specific extensions. It also allows a number of\r\ncompiler parameters to customize and optimize compiled templates.\r\n\r\nProust also comes with a port of the Ruby StringScanner object which\r\ncould prove useful on its own.\r\n\r\nOverview\r\n--------\r\n\r\nProust takes mustache templates as input (either one or more\r\ntemplates, either as strings or as templates), and generates PHP code\r\nfor them. Partials can be passed dynamically or by using a template\r\ndirectory which the compiler will use to look them up. The compiled\r\ncode can be cached dynamically and on disk by writing out php files.\r\n\r\nQuick example\r\n-------------\r\n\r\nA quick example:\r\n\r\n```php\r\n<?php\r\n\r\n/* simple hello world */\r\n\r\nrequire_once(dirname(__FILE__).\"/../Proust.php\");\r\n\r\n$p = new Proust\\Proust();\r\necho $p->render(\"Hello {{planet}}\\n\", array(\"planet\" => \"World\"));\r\n\r\n?>\r\n```\r\n\r\nMustache template\r\n-----------------\r\n\r\nThe canonical Mustache template, with a php class:\r\n\r\n```php\r\n<?php\r\n\r\n/* canonical mustache template */\r\n\r\nrequire_once(dirname(__FILE__).\"/../Proust.php\");\r\n\r\n$p = new Proust\\Proust();\r\n\r\n$tpl =<<<'EOD'\r\nHello {{name}}\r\nYou have just won ${{value}}!\r\n{{#in_ca}}\r\nWell, ${{taxed_value}}, after taxes.\r\n{{/in_ca}}\r\n\r\nEOD;\r\n\r\nclass Chris {\r\n  public $name = \"Chris\";\r\n  public $value = 10000;\r\n  public $in_ca = true;\r\n\r\n  public function taxed_value() {\r\n    return $this->value - ($this->value * 0.4);\r\n  }\r\n}\r\n\r\necho $p->render($tpl, new Chris());\r\n\r\n?>\r\n```\r\n\r\nProust options\r\n--------------\r\n\r\nNow on to the more compiler specific aspects of Proust. Proust can\r\ncache the output of the compiler in a cache directory. These files can\r\nlater be reused by including their contents. Proust does this\r\nautomatically when caching is enabled. It recompiles templates when\r\nthe original template file is newer than the cached version. It also\r\nhashes the compiler options and ctag and otag to avoid conflicts.\r\n\r\nThis example also shows the multiple compiler options:\r\n\r\n* *disableObjects* - disable the possibility to use objects (and their\r\n   methods and variables) at runtime. Makes for a slightly quicker\r\n   context lookup. This is not a compiler option, but rather a runtime\r\n   option.\r\n* *disableLambdas* - don't allow for lambdas (or object methods) on\r\n   the context stack. Makes the resulting code smaller and slightly\r\n   quicker.\r\n* *disableIndentation* - don't indent partials (which is not necessary\r\n   for HTML for example). Makes for faster output, as there is no need\r\n   to keep track of the indentation level, and plain \"echo\" can be\r\n   used.\r\n* *includePartialCode* - include partial code directly where a partial\r\n   is called. Makes for faster (and bigger) code.\r\n\r\n```php\r\n<?php\r\n\r\n/* example with partials, caching and some compiler options */\r\n\r\nrequire_once(dirname(__FILE__).\"/../Proust.php\");\r\n\r\n$p = new Proust\\Proust(array(\"enableCache\" => true,\r\n                             \"cacheDir\" => dirname(__FILE__).\"/.proust.cache/\",\r\n                             \"templatePath\" => dirname(__FILE__).\"/templates/\",\r\n                             \"disableObjects\" => \"true\",\r\n                             \"compilerOptions\" => array(\"disableLambdas\" => true,\r\n                                                        // \"disableIndentation\" => true,\r\n                                                        \"includePartialCode\" => true\r\n                                                        )));\r\n\r\n$data = array(\"foo\" => array(\"x\" => 1,\r\n                             \"y\" => 2,\r\n                             \"z\" => array(1, 2, 3, 4)));\r\necho $p->renderTemplate(\"section1\", $data);\r\n\r\necho \"\\nIndentation disabled:\\n\";\r\n\r\n$p->compilerOptions[\"disableIndentation\"] = true;\r\necho $p->renderTemplate(\"section1\", $data);\r\n\r\necho \"\\nWith explicit partials:\\n\";\r\n$p->compilerOptions[\"disableIndentation\"] = false;\r\n$p->partials = array(\"partial2\" => \"{{foo.y}}\");\r\necho $p->renderTemplate(\"section1\", $data);\r\n\r\necho \"\\nShow caching in effect:\\n\";\r\n$p->partials = array(\"partial2\" => \"NEW VERSION: {{foo.y}}\");\r\necho $p->renderTemplate(\"section1\", $data);\r\n\r\necho \"\\nAfter clearCache:\\n\";\r\n$p->clearCache();\r\necho $p->renderTemplate(\"section1\", $data);\r\n\r\n?>\r\n```\r\n\r\nTokenized output\r\n-----------------\r\n\r\nTo get a glimpse at the compilation results, you can use the getTokens\r\n(with their variants getTemplateTokens and getFileTokens), as well as\r\nthe compile (and compileTemplate and compileFile) methods.\r\n\r\n```php\r\n<?php\r\n\r\n/* get code tokens */\r\n\r\nrequire_once(dirname(__FILE__).\"/../Proust.php\");\r\n\r\n$p = new Proust\\Proust(array(\"templatePath\" => dirname(__FILE__).\"/templates/\"));\r\n$p->partials = array(\"partial\" => \"{{#section}}{{bla}}{{/section}}\");\r\n\r\n$tpl =<<<'EOT'\r\n{{#foo}}{{bla}}{{/foo}}\r\n{{>partial}}\r\nEOT;\r\n\r\necho \"Tokens:\\n-------\\n\\n\";\r\nvar_dump($p->getTokens($tpl));\r\n\r\necho \"\\n\\nTemplate tokens:\\n----------------\\n\\n\";\r\nvar_dump($p->getTemplateTokens(\"section1\"));\r\n\r\necho \"\\n\\nFile tokens:\\n----------------\\n\\n\";\r\nvar_dump($p->getFileTokens(dirname(__FILE__).\"/templates/partial.mustache\"));\r\n\r\n?>\r\n```\r\n\r\nCompiler output\r\n---------------\r\n\r\nThe compiler output can be beautified by installing the PHP_Beautifyer\r\nPEAR extension, and setting the compiler option \"beautify\" to\r\ntrue. This is not entirely tested, and is a bit brittle (it happened\r\nto break a huge class compilation, but that has been \"avoided\" for now).\r\n\r\n```php\r\n<?php\r\n\r\n/* compile some templates */\r\n\r\nrequire_once(dirname(__FILE__).\"/../Proust.php\");\r\n\r\n$p = new Proust\\Proust(array(\"templatePath\" => dirname(__FILE__).\"/templates/\"));\r\n$p->partials = array(\"partial\" => \"{{#section}}{{bla}}{{/section}}\");\r\n\r\n$tpl =<<<'EOT'\r\n{{#foo}}{{bla}}{{/foo}}\r\n{{>partial}}\r\nEOT;\r\n\r\necho \"\\n\\n\\nCode:\\n-----\\n\\n\";\r\necho $p->compile($tpl);\r\necho \"\\n\\n\";\r\n\r\n$p->compilerOptions = array(\"includePartialCode\" => true);\r\necho \"\\n\\n\\nCode with included partials:\\n----------------------------\\n\\n\";\r\necho $p->compile($tpl);\r\necho \"\\n\\n\";\r\n\r\n$p->compilerOptions = array(\"disableLambdas\" => true);\r\necho \"\\n\\n\\nCode with disabled lambdas:\\n---------------------------\\n\\n\";\r\necho $p->compile($tpl);\r\necho \"\\n\\n\";\r\n\r\n$p->compilerOptions = array(\"disableIndentation\" => true);\r\necho \"\\n\\n\\nCode with disabled indentation:\\n-------------------------------\\n\\n\";\r\necho $p->compile($tpl);\r\necho \"\\n\\n\";\r\n?>\r\n```\r\n\r\nClass Generation\r\n----------------\r\n\r\nProust can also generate a class from templates and partials. The\r\nclass can then be used to render the templates (one method per\r\ntemplate or partial.\r\n\r\n```php\r\n<?php\r\n\r\n/* render and call a template class */\r\n\r\nrequire_once(dirname(__FILE__).\"/../Proust.php\");\r\n\r\n$p = new Proust\\Proust(array(\"templatePath\" => dirname(__FILE__).\"/templates/\",\r\n                             \"compilerOptions\" => array(\"beautify\" => true)));\r\n$p->partials = array(\"partial\" => \"{{#section}}{{bla}}{{/section}}\\n\");\r\n\r\n$tpl =<<<'EOT'\r\n{{#foo}}{{bla}}{{/foo}}\r\n{{>partial}}\r\nEOT;\r\n\r\n$tpl2 =<<<'EOT'\r\n{{#foo}}{{>section1}}{{/foo}}\r\nEOT;\r\n\r\necho \"\\n\\n\\nClass:\\n-----\\n\\n\";\r\n$code = $p->compileClass(\"TestClass\", array(array(\"main\", $tpl),\r\n                                            array(\"foobar\", $tpl2)));\r\necho $code;\r\necho \"\\n\\n\";\r\n\r\neval($code);\r\n\r\n$test = new TestClass($p);\r\necho \"\\n\\n\\nMethod main():\\n---------------\\n\\n\";\r\necho $test->main(array(\"foo\" => array(\"bla\" => \"Hello world\"),\r\n                       \"section\" => array(\"bla\" => \"Partial hello world\")));\r\n\r\necho \"\\n\\n\\nMethod foobar():\\n----------------\\n\\n\";\r\necho $test->foobar(array(\"foo\" => array(\"x\" => 1,\r\n                                        \"y\" => 2,\r\n                                        \"z\" => array(1, 2, 3, 4)),\r\n                         \"section\" => array(\"bla\" => \"Partial hello world\")));\r\n\r\n\r\n?>\r\n```\r\n\r\nCommand line interface\r\n----------------------\r\n\r\nProust comes with a command line interface to compile and inspect\r\nmustache templates.\r\n\r\n```\r\n$ php Proust.php  -h\r\nUsage:\r\n\r\n Proust.php [-o outputfile] [-p partialDir] [-i] [-e] [-t] [-h] [-j json] -- inputfiles...\r\n\r\n   -o outputfile : store php in this file\r\n   -t            : print token array\r\n   -h            : this information\r\n   -p path       : set template path\r\n   -e            : evaluate templates\r\n   -j json       : parse json file and pass as context to evaluation\r\n   -c name       : compile to class name\r\n   --disable-lambdas : disable lambdas for compilation\r\n   --disable-indentation : disable indentation for compilation\r\n   --include-partials : include partials directly as code\r\n   --beautify     : beautify generated code\r\n```\r\n\r\nKnown Issues\r\n------------\r\n\r\n* Beware of caching and the compiler option \"includePartialCode\". When\r\n  partials are changed, the compiled code won't be updated, and still\r\n  contain the all partials. If you want to include dynamic partials as\r\n  well (even more volatile), please set the compiler options\r\n  \"includeDynamicPartials\" to true.\r\n\r\nSee Also\r\n--------\r\n\r\n * [mustache specification](https://github.com/mustache/spec)\r\n * [Readme for the Ruby Mustache implementation](http://github.com/defunkt/mustache/blob/master/README.md).\r\n * [mustache(1)](http://mustache.github.com/mustache.1.html) and [mustache(5)](http://mustache.github.com/mustache.5.html) man pages.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}